# coding: utf-8

"""
    GroupBy Retail

    GroupBy Retail API

    The version of the OpenAPI document: 0.0.0
    Contact: ops@groupbyinc.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel, Field, StrictStr

class Facet(BaseModel):
    """
    A facet specification to perform faceted search.  # noqa: E501
    """
    prefix: Optional[StrictStr] = Field(None, description="Only get facet values that start with the given string prefix. For example, suppose \"categories\" has three values \"Women > Shoe\", \"Women > Dress\" and \"Men > Shoe\". If set \"prefixes\" to \"Women\", the \"categories\" facet will give only \"Women > Shoe\" and \"Women > Dress\". Only supported on textual fields. Maximum is 10. This field is case-sensitive")
    contains: Optional[StrictStr] = Field(None, description="Only get facet values that contains the given strings. For example, suppose \"categories\" has three values \"Women > Shoe\", \"Women > Dress\" and \"Men > Shoe\". If set \"contains\" to \"Shoe\", the \"categories\" facet will give only \"Women > Shoe\" and \"Men > Shoe\". Only supported on textual fields. Maximum is 10. This field is case-sensitive")
    display_name: Optional[StrictStr] = Field(None, alias="displayName", description="Display name of facet")
    type: Optional[Any] = None
    navigation_name: Optional[StrictStr] = Field(None, alias="navigationName", description="Represents the name of navigation.")
    __properties = ["prefix", "contains", "displayName", "type", "navigationName"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Facet:
        """Create an instance of Facet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of type
        if self.type:
            _dict['type'] = self.type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Facet:
        """Create an instance of Facet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Facet.parse_obj(obj)

        _obj = Facet.parse_obj({
            "prefix": obj.get("prefix"),
            "contains": obj.get("contains"),
            "display_name": obj.get("displayName"),
            "type": NavigationType.from_dict(obj.get("type")) if obj.get("type") is not None else None,
            "navigation_name": obj.get("navigationName")
        })
        return _obj


