# coding: utf-8

"""
    GroupBy Retail

    GroupBy Retail API

    The version of the OpenAPI document: 0.0.0
    Contact: ops@groupbyinc.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictInt, StrictStr
from gb_retailapi_client.models.rule_variant import RuleVariant

class ExperimentVariant(BaseModel):
    """
    ExperimentVariant
    """
    name: StrictStr = Field(...)
    rule_variant: RuleVariant = Field(..., alias="ruleVariant")
    variant_trigger_percentage: StrictInt = Field(..., alias="variantTriggerPercentage")
    __properties = ["name", "ruleVariant", "variantTriggerPercentage"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ExperimentVariant:
        """Create an instance of ExperimentVariant from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of rule_variant
        if self.rule_variant:
            _dict['ruleVariant'] = self.rule_variant.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ExperimentVariant:
        """Create an instance of ExperimentVariant from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ExperimentVariant.parse_obj(obj)

        _obj = ExperimentVariant.parse_obj({
            "name": obj.get("name"),
            "rule_variant": RuleVariant.from_dict(obj.get("ruleVariant")) if obj.get("ruleVariant") is not None else None,
            "variant_trigger_percentage": obj.get("variantTriggerPercentage")
        })
        return _obj


