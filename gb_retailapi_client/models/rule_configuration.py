# coding: utf-8

"""
    GroupBy Retail

    GroupBy Retail API

    The version of the OpenAPI document: 0.0.0
    Contact: ops@groupbyinc.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist
from gb_retailapi_client.models.boosted_product_bucket import BoostedProductBucket
from gb_retailapi_client.models.experiment_variant import ExperimentVariant
from gb_retailapi_client.models.message_type import MessageType
from gb_retailapi_client.models.pinned_refinement import PinnedRefinement
from gb_retailapi_client.models.range_filter import RangeFilter
from gb_retailapi_client.models.rule_template import RuleTemplate
from gb_retailapi_client.models.rule_type import RuleType
from gb_retailapi_client.models.search_filter import SearchFilter
from gb_retailapi_client.models.sort import Sort
from gb_retailapi_client.models.trigger_set import TriggerSet
from gb_retailapi_client.models.value_filter import ValueFilter

class RuleConfiguration(BaseModel):
    """
    RuleConfiguration
    """
    rule_in_experiment: Optional[StrictBool] = Field(None, alias="ruleInExperiment")
    id: StrictInt = Field(...)
    name: StrictStr = Field(...)
    area_id: StrictInt = Field(..., alias="areaId")
    priority: StrictInt = Field(...)
    enabled: StrictBool = Field(...)
    active_hours_enabled: StrictBool = Field(..., alias="activeHoursEnabled")
    active_from: StrictInt = Field(..., alias="activeFrom")
    active_to: StrictInt = Field(..., alias="activeTo")
    trigger_sets: conlist(TriggerSet) = Field(..., alias="triggerSets")
    biasing_profile_name: StrictStr = Field(..., alias="biasingProfileName")
    sort: Sort = Field(...)
    included_navigations: conlist(StrictStr) = Field(..., alias="includedNavigations")
    value_filters: conlist(ValueFilter) = Field(..., alias="valueFilters")
    search_filters: conlist(SearchFilter) = Field(..., alias="searchFilters")
    range_filters: conlist(RangeFilter) = Field(..., alias="rangeFilters")
    template: RuleTemplate = Field(...)
    boosted_product_buckets: Optional[conlist(BoostedProductBucket)] = Field(..., alias="boostedProductBuckets")
    pinned_refinements: conlist(PinnedRefinement) = Field(..., alias="pinnedRefinements")
    message_type: MessageType = Field(..., alias="messageType")
    type: RuleType = Field(...)
    variants: conlist(ExperimentVariant) = Field(...)
    __properties = ["ruleInExperiment", "id", "name", "areaId", "priority", "enabled", "activeHoursEnabled", "activeFrom", "activeTo", "triggerSets", "biasingProfileName", "sort", "includedNavigations", "valueFilters", "searchFilters", "rangeFilters", "template", "boostedProductBuckets", "pinnedRefinements", "messageType", "type", "variants"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RuleConfiguration:
        """Create an instance of RuleConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in trigger_sets (list)
        _items = []
        if self.trigger_sets:
            for _item in self.trigger_sets:
                if _item:
                    _items.append(_item.to_dict())
            _dict['triggerSets'] = _items
        # override the default output from pydantic by calling `to_dict()` of sort
        if self.sort:
            _dict['sort'] = self.sort.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in value_filters (list)
        _items = []
        if self.value_filters:
            for _item in self.value_filters:
                if _item:
                    _items.append(_item.to_dict())
            _dict['valueFilters'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in search_filters (list)
        _items = []
        if self.search_filters:
            for _item in self.search_filters:
                if _item:
                    _items.append(_item.to_dict())
            _dict['searchFilters'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in range_filters (list)
        _items = []
        if self.range_filters:
            for _item in self.range_filters:
                if _item:
                    _items.append(_item.to_dict())
            _dict['rangeFilters'] = _items
        # override the default output from pydantic by calling `to_dict()` of template
        if self.template:
            _dict['template'] = self.template.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in boosted_product_buckets (list)
        _items = []
        if self.boosted_product_buckets:
            for _item in self.boosted_product_buckets:
                if _item:
                    _items.append(_item.to_dict())
            _dict['boostedProductBuckets'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in pinned_refinements (list)
        _items = []
        if self.pinned_refinements:
            for _item in self.pinned_refinements:
                if _item:
                    _items.append(_item.to_dict())
            _dict['pinnedRefinements'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in variants (list)
        _items = []
        if self.variants:
            for _item in self.variants:
                if _item:
                    _items.append(_item.to_dict())
            _dict['variants'] = _items
        # set to None if boosted_product_buckets (nullable) is None
        # and __fields_set__ contains the field
        if self.boosted_product_buckets is None and "boosted_product_buckets" in self.__fields_set__:
            _dict['boostedProductBuckets'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RuleConfiguration:
        """Create an instance of RuleConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RuleConfiguration.parse_obj(obj)

        _obj = RuleConfiguration.parse_obj({
            "rule_in_experiment": obj.get("ruleInExperiment"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "area_id": obj.get("areaId"),
            "priority": obj.get("priority"),
            "enabled": obj.get("enabled"),
            "active_hours_enabled": obj.get("activeHoursEnabled"),
            "active_from": obj.get("activeFrom"),
            "active_to": obj.get("activeTo"),
            "trigger_sets": [TriggerSet.from_dict(_item) for _item in obj.get("triggerSets")] if obj.get("triggerSets") is not None else None,
            "biasing_profile_name": obj.get("biasingProfileName"),
            "sort": Sort.from_dict(obj.get("sort")) if obj.get("sort") is not None else None,
            "included_navigations": obj.get("includedNavigations"),
            "value_filters": [ValueFilter.from_dict(_item) for _item in obj.get("valueFilters")] if obj.get("valueFilters") is not None else None,
            "search_filters": [SearchFilter.from_dict(_item) for _item in obj.get("searchFilters")] if obj.get("searchFilters") is not None else None,
            "range_filters": [RangeFilter.from_dict(_item) for _item in obj.get("rangeFilters")] if obj.get("rangeFilters") is not None else None,
            "template": RuleTemplate.from_dict(obj.get("template")) if obj.get("template") is not None else None,
            "boosted_product_buckets": [BoostedProductBucket.from_dict(_item) for _item in obj.get("boostedProductBuckets")] if obj.get("boostedProductBuckets") is not None else None,
            "pinned_refinements": [PinnedRefinement.from_dict(_item) for _item in obj.get("pinnedRefinements")] if obj.get("pinnedRefinements") is not None else None,
            "message_type": obj.get("messageType"),
            "type": obj.get("type"),
            "variants": [ExperimentVariant.from_dict(_item) for _item in obj.get("variants")] if obj.get("variants") is not None else None
        })
        return _obj


