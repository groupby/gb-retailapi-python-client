# coding: utf-8

"""
    GroupBy Retail

    GroupBy Retail API

    The version of the OpenAPI document: 0.0.0
    Contact: ops@groupbyinc.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field
from gb_retailapi_client.models.facet import Facet
from gb_retailapi_client.models.search_request_dto import SearchRequestDto

class FacetSearchRequestDto(BaseModel):
    """
    Request that should be populated to configure a search API call, made by the client on behalf of a shopper. Contains original request and information about facet for which extra keys requested.  # noqa: E501
    """
    facet: Facet = Field(...)
    original_request: SearchRequestDto = Field(..., alias="originalRequest")
    __properties = ["facet", "originalRequest"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FacetSearchRequestDto:
        """Create an instance of FacetSearchRequestDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of facet
        if self.facet:
            _dict['facet'] = self.facet.to_dict()
        # override the default output from pydantic by calling `to_dict()` of original_request
        if self.original_request:
            _dict['originalRequest'] = self.original_request.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FacetSearchRequestDto:
        """Create an instance of FacetSearchRequestDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return FacetSearchRequestDto.parse_obj(obj)

        _obj = FacetSearchRequestDto.parse_obj({
            "facet": Facet.from_dict(obj.get("facet")) if obj.get("facet") is not None else None,
            "original_request": SearchRequestDto.from_dict(obj.get("originalRequest")) if obj.get("originalRequest") is not None else None
        })
        return _obj


