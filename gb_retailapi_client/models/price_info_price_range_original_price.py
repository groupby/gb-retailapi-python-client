# coding: utf-8

"""
    GroupBy Retail

    GroupBy Retail API

    The version of the OpenAPI document: 0.0.0
    Contact: ops@groupbyinc.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt

class PriceInfoPriceRangeOriginalPrice(BaseModel):
    """
    PriceInfoPriceRangeOriginalPrice
    """
    minimum: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="Inclusive lower bound. The lower bound of the interval. If neither of the min fields (minimum or exclusiveMinimum) are set, then the lower bound is negative infinity. This field must be not larger than maximum or exclusiveMaximum.")
    exclusive_minimum: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="exclusiveMinimum", description="Exclusive lower bound. The lower bound of the interval. If neither of the min fields (minimum or exclusiveMinimum) are set, then the lower bound is negative infinity. This field must be not larger than maximum or exclusiveMaximum.")
    maximum: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="Inclusive upper bound. The upper bound of the interval. If neither of the max fields are set, then the upper bound is positive infinity. This field must be not smaller than minimum or exclusiveMinimum.")
    exclusive_maximum: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="exclusiveMaximum", description="Exclusive upper bound. The upper bound of the interval. If neither of the max fields are set, then the upper bound is positive infinity. This field must be not smaller than minimum or exclusiveMinimum.")
    __properties = ["minimum", "exclusiveMinimum", "maximum", "exclusiveMaximum"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PriceInfoPriceRangeOriginalPrice:
        """Create an instance of PriceInfoPriceRangeOriginalPrice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PriceInfoPriceRangeOriginalPrice:
        """Create an instance of PriceInfoPriceRangeOriginalPrice from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PriceInfoPriceRangeOriginalPrice.parse_obj(obj)

        _obj = PriceInfoPriceRangeOriginalPrice.parse_obj({
            "minimum": obj.get("minimum"),
            "exclusive_minimum": obj.get("exclusiveMinimum"),
            "maximum": obj.get("maximum"),
            "exclusive_maximum": obj.get("exclusiveMaximum")
        })
        return _obj


