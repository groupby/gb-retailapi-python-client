# coding: utf-8

"""
    GroupBy Retail

    GroupBy Retail API

    The version of the OpenAPI document: 0.0.0
    Contact: ops@groupbyinc.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictStr

class RecordDto(BaseModel):
    """
    Information regarding a product in the proprietary Group By API format.  # noqa: E501
    """
    id: Optional[StrictStr] = Field(None, alias="_id", description="Identifier of the record as an MD5 hash.")
    u: Optional[StrictStr] = Field(None, alias="_u", description="Logical URL of the record.")
    t: Optional[StrictStr] = Field(None, alias="_t", description="Title of the record.")
    collection: Optional[StrictStr] = Field(None, description="Collection the record was queried from or resides.")
    all_meta: Optional[Dict[str, Any]] = Field(None, alias="allMeta", description="All other metadata, read fields, the record has.")
    __properties = ["_id", "_u", "_t", "collection", "allMeta"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RecordDto:
        """Create an instance of RecordDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RecordDto:
        """Create an instance of RecordDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RecordDto.parse_obj(obj)

        _obj = RecordDto.parse_obj({
            "id": obj.get("_id"),
            "u": obj.get("_u"),
            "t": obj.get("_t"),
            "collection": obj.get("collection"),
            "all_meta": obj.get("allMeta")
        })
        return _obj


