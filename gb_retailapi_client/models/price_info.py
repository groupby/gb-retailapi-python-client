# coding: utf-8

"""
    GroupBy Retail

    GroupBy Retail API

    The version of the OpenAPI document: 0.0
    Contact: ops@groupbyinc.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr
from gb_retailapi_client.models.price_info_price_effective_time import PriceInfoPriceEffectiveTime
from gb_retailapi_client.models.price_info_price_expire_time import PriceInfoPriceExpireTime
from gb_retailapi_client.models.price_info_price_range import PriceInfoPriceRange

class PriceInfo(BaseModel):
    """
    Price info representation.  # noqa: E501
    """
    currency_code: Optional[StrictStr] = Field(None, alias="currencyCode", description="Currency code.")
    price: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="Price value.")
    original_price: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="originalPrice", description="Original price value.")
    cost: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="Cost")
    price_effective_time: Optional[PriceInfoPriceEffectiveTime] = Field(None, alias="priceEffectiveTime")
    price_expire_time: Optional[PriceInfoPriceExpireTime] = Field(None, alias="priceExpireTime")
    price_range: Optional[PriceInfoPriceRange] = Field(None, alias="priceRange")
    __properties = ["currencyCode", "price", "originalPrice", "cost", "priceEffectiveTime", "priceExpireTime", "priceRange"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PriceInfo:
        """Create an instance of PriceInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of price_effective_time
        if self.price_effective_time:
            _dict['priceEffectiveTime'] = self.price_effective_time.to_dict()
        # override the default output from pydantic by calling `to_dict()` of price_expire_time
        if self.price_expire_time:
            _dict['priceExpireTime'] = self.price_expire_time.to_dict()
        # override the default output from pydantic by calling `to_dict()` of price_range
        if self.price_range:
            _dict['priceRange'] = self.price_range.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PriceInfo:
        """Create an instance of PriceInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PriceInfo.parse_obj(obj)

        _obj = PriceInfo.parse_obj({
            "currency_code": obj.get("currencyCode"),
            "price": obj.get("price"),
            "original_price": obj.get("originalPrice"),
            "cost": obj.get("cost"),
            "price_effective_time": PriceInfoPriceEffectiveTime.from_dict(obj.get("priceEffectiveTime")) if obj.get("priceEffectiveTime") is not None else None,
            "price_expire_time": PriceInfoPriceExpireTime.from_dict(obj.get("priceExpireTime")) if obj.get("priceExpireTime") is not None else None,
            "price_range": PriceInfoPriceRange.from_dict(obj.get("priceRange")) if obj.get("priceRange") is not None else None
        })
        return _obj


