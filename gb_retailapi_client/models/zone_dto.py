# coding: utf-8

"""
    GroupBy Retail

    GroupBy Retail API

    The version of the OpenAPI document: 0.0
    Contact: ops@groupbyinc.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel, Field, StrictStr

class ZoneDto(BaseModel):
    """
    UI zones, that may contain code snippets, sub-searches and etc.  # noqa: E501
    """
    name: Optional[StrictStr] = Field(None, description="A name for the zone, ideally human-readable.")
    type: Optional[Any] = None
    content: Optional[StrictStr] = Field(None, description="Zone content - it is can be any data, HTML - code, usual text or etc")
    rich_content: Optional[StrictStr] = Field(None, alias="richContent", description="Zone content - it is can be any data, HTML - code, usual text or etc")
    __properties = ["name", "type", "content", "richContent"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ZoneDto:
        """Create an instance of ZoneDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of type
        if self.type:
            _dict['type'] = self.type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ZoneDto:
        """Create an instance of ZoneDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ZoneDto.parse_obj(obj)

        _obj = ZoneDto.parse_obj({
            "name": obj.get("name"),
            "type": ZoneDtoType.from_dict(obj.get("type")) if obj.get("type") is not None else None,
            "content": obj.get("content"),
            "rich_content": obj.get("richContent")
        })
        return _obj


