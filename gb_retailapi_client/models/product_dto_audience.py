# coding: utf-8

"""
    GroupBy Retail

    GroupBy Retail API

    The version of the OpenAPI document: 0.0.0
    Contact: ops@groupbyinc.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist

class ProductDtoAudience(BaseModel):
    """
    ProductDtoAudience
    """
    genders: Optional[conlist(StrictStr)] = Field(None, description="The genders of the audience. Strongly encouraged to use the standard values: 'male', 'female', 'unisex'. At most 5 values are allowed. Length limit of 128 characters.")
    age_groups: Optional[conlist(StrictStr)] = Field(None, alias="ageGroups", description="The age groups of the audience. Strongly encouraged to use the standard values: 'newborn' (up to 3 months old), 'infant' (3-12 months old), 'toddler' (1-5 years old), 'kids' (5-13 years old), 'adult' (typically teens or older). At most 5 values are allowed. Length limit of 128 characters.")
    __properties = ["genders", "ageGroups"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ProductDtoAudience:
        """Create an instance of ProductDtoAudience from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ProductDtoAudience:
        """Create an instance of ProductDtoAudience from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ProductDtoAudience.parse_obj(obj)

        _obj = ProductDtoAudience.parse_obj({
            "genders": obj.get("genders"),
            "age_groups": obj.get("ageGroups")
        })
        return _obj


