# coding: utf-8

"""
    GroupBy Retail

    GroupBy Retail API

    The version of the OpenAPI document: 0.0
    Contact: ops@groupbyinc.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr

class SelectedRefinementDto(BaseModel):
    """
    Refinement the shopper has selected for filtering.  # noqa: E501
    """
    navigation_name: StrictStr = Field(..., alias="navigationName", description="The name of the navigation the refinement is for.")
    type: Any = Field(...)
    value: Optional[StrictStr] = Field(None, description="Value of selected refinement, if type is value.")
    low: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The lowest end or value of the range, if applicable.")
    high: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The highest end or value of the range, if applicable.")
    source: Optional[StrictStr] = Field(None, description="Field which is indicated that it is dynamic navigation.")
    var_or: Optional[StrictBool] = Field(None, alias="or", description="Navigation multiselect. Indicate that it is possibly to select more than one navigation value due to search request.")
    __properties = ["navigationName", "type", "value", "low", "high", "source", "or"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SelectedRefinementDto:
        """Create an instance of SelectedRefinementDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of type
        if self.type:
            _dict['type'] = self.type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SelectedRefinementDto:
        """Create an instance of SelectedRefinementDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SelectedRefinementDto.parse_obj(obj)

        _obj = SelectedRefinementDto.parse_obj({
            "navigation_name": obj.get("navigationName"),
            "type": NavigationTypeDto.from_dict(obj.get("type")) if obj.get("type") is not None else None,
            "value": obj.get("value"),
            "low": obj.get("low"),
            "high": obj.get("high"),
            "source": obj.get("source"),
            "var_or": obj.get("or")
        })
        return _obj


