# coding: utf-8

"""
    GroupBy Retail

    GroupBy Retail API

    The version of the OpenAPI document: 0.0
    Contact: ops@groupbyinc.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from gb_retailapi_client.models.metadata import Metadata
from gb_retailapi_client.models.navigation_type_dto import NavigationTypeDto
from gb_retailapi_client.models.refinement_dto import RefinementDto

class NavigationDto(BaseModel):
    """
    Navigation available for the shopper to refine the results on.  # noqa: E501
    """
    name: Optional[StrictStr] = Field(None, description="Name of the field the navigation in on.")
    display_name: Optional[StrictStr] = Field(None, alias="displayName", description="Name of the navigation for display purposes.")
    type: NavigationTypeDto = Field(...)
    refinements: conlist(RefinementDto) = Field(...)
    var_or: Optional[StrictBool] = Field(None, alias="or", description="Flag if this navigation supports or queries.")
    source: StrictStr = Field(...)
    metadata: conlist(Metadata) = Field(...)
    place_id: StrictStr = Field(..., alias="placeId", description="Place id for inventory navigations.")
    __properties = ["name", "displayName", "type", "refinements", "or", "source", "metadata", "placeId"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> NavigationDto:
        """Create an instance of NavigationDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in refinements (list)
        _items = []
        if self.refinements:
            for _item in self.refinements:
                if _item:
                    _items.append(_item.to_dict())
            _dict['refinements'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in metadata (list)
        _items = []
        if self.metadata:
            for _item in self.metadata:
                if _item:
                    _items.append(_item.to_dict())
            _dict['metadata'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> NavigationDto:
        """Create an instance of NavigationDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return NavigationDto.parse_obj(obj)

        _obj = NavigationDto.parse_obj({
            "name": obj.get("name"),
            "display_name": obj.get("displayName"),
            "type": obj.get("type"),
            "refinements": [RefinementDto.from_dict(_item) for _item in obj.get("refinements")] if obj.get("refinements") is not None else None,
            "var_or": obj.get("or"),
            "source": obj.get("source"),
            "metadata": [Metadata.from_dict(_item) for _item in obj.get("metadata")] if obj.get("metadata") is not None else None,
            "place_id": obj.get("placeId")
        })
        return _obj


